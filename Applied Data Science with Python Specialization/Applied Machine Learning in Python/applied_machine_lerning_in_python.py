# -*- coding: utf-8 -*-
"""Applied Machine Lerning in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1giz1CLP4N6ESPCX3z6MUh-frH7nMdkmR
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer

cancer = load_breast_cancer()

#print(cancer.DESCR) # Print the data set description

cancer.keys()

# You should write your whole answer within the function provided. The autograder will call
# this function and compare the return value against the correct solution value
def answer_zero():
    # This function returns the number of features of the breast cancer dataset, which is an integer. 
    # The assignment question description will tell you the general format the autograder is expecting
    return len(cancer['feature_names'])

# You can examine what your function returns by calling it in the cell. If you have questions
# about the assignment formats, check out the discussion forums for any FAQs

def answer_one():
    
    df = pd.DataFrame(np.c_[cancer['data'], cancer['target']],columns= np.append(cancer['feature_names'], ['target']))
    
    return df

def answer_two():
    df = answer_one()
    df1=df['target']
    dic={0.0:'malignant',1.0:'benign'}
    df1=df1.to_frame()
    df1=df1.replace({'target':dic})
    df['Name']=df1
    tmp=df.groupby('Name')['target'].agg('count')
    return tmp

def answer_three():
    df = answer_one()
    
    X=df[['mean radius', 'mean texture', 'mean perimeter', 'mean area','mean smoothness', 'mean compactness', 'mean concavity','mean concave points', 'mean symmetry', 'mean fractal dimension','radius error', 'texture error', 'perimeter error', 'area error','smoothness error', 'compactness error', 'concavity error','concave points error', 'symmetry error', 'fractal dimension error','worst radius', 'worst texture', 'worst perimeter', 'worst area','worst smoothness', 'worst compactness', 'worst concavity','worst concave points', 'worst symmetry', 'worst fractal dimension']]
    y=df['target']
    rv=(X,y)
    return rv

from sklearn.model_selection import train_test_split

def answer_four():
    X, y = answer_three()
    
    X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)
    
    return (X_train, X_test, y_train, y_test)

from sklearn.neighbors import KNeighborsClassifier

def answer_five():
    X_train, X_test, y_train, y_test = answer_four()
    
    knc=KNeighborsClassifier(n_neighbors = 1)
    
    knc.fit(X_train,y_train)
    
    return knc

def answer_six():
    cancerdf = answer_one()
    means = cancerdf.mean()[:-1].values.reshape(1, -1)
    knc=answer_five()
    tmp=knc.predict(means)
    
    return tmp

def answer_seven():
    X_train, X_test, y_train, y_test = answer_four()
    knc = answer_five()
    
    tmp=knc.predict(X_test)
    
    return tmp

def answer_eight():
    X_train, X_test, y_train, y_test = answer_four()
    knc = answer_five()
    
    scr=knc.score(X_test,y_test)
    
    return scr