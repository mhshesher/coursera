# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1giz1CLP4N6ESPCX3z6MUh-frH7nMdkmR
"""

import pandas as pd

df = pd.read_csv('olympics.csv', index_col=0, skiprows=1)

for col in df.columns:
    if col[:2]=='01':
        df.rename(columns={col:'Gold'+col[4:]}, inplace=True)
    if col[:2]=='02':
        df.rename(columns={col:'Silver'+col[4:]}, inplace=True)
    if col[:2]=='03':
        df.rename(columns={col:'Bronze'+col[4:]}, inplace=True)
    if col[:1]=='â„–':
        df.rename(columns={col:'#'+col[1:]}, inplace=True)

names_ids = df.index.str.split('\s\(') # split the index by '('

df.index = names_ids.str[0] # the [0] element is the country name (new index) 
df['ID'] = names_ids.str[1].str[:3] # the [1] element is the abbreviation or ID (take first 3 characters from that)

df = df.drop('Totals')
df.head()

def answer_zero():
    return df.iloc[0]

def answer_one():
    tmp=df.where(df['Gold']==df['Gold'].max())
    tmp=tmp.dropna()
    return tmp.index[0]

def answer_two():
    tmp=df.where((df['Gold']-df['Gold.1'])==(df['Gold']-df['Gold.1']).max())
    tmp=tmp.dropna()
    return tmp.index[0]

def answer_three():
    df0=df[(df['Gold']>0) & (df['Gold.1']>0)]
    df0=df0.dropna()
    tmp0=(df0['Gold']-df0['Gold.1'])/df0['Gold.2']
    tmp1=df0.where(tmp0==tmp0.max())
    tmp1=tmp1.dropna()
    return tmp1.index[0]

def answer_four():
    tmp=df['Gold.2']*3+df['Silver.2']*2+df['Bronze.2']*1
    tmp.rename('Points')
    return tmp

census_df = pd.read_csv('census.csv')
census_df.head()

def answer_five():
    tmp1=census_df[census_df['SUMLEV']==50].groupby('STNAME')['COUNTY'].count()
    for i in range(len(tmp1)):
        if(tmp1.iloc[i]==tmp1.max()):
            a=tmp1.index[i]
            return a

def answer_six():
    tmp0=census_df[census_df['SUMLEV']==50].groupby('STNAME').apply(lambda tmp:tmp.nlargest(3,'CENSUS2010POP'))
    tmp1=tmp0.groupby('STNAME')['CENSUS2010POP'].sum()
    tmp2=tmp1.sort_values(ascending=False)
    lst=[]
    lst.append(tmp2.index[0])
    lst.append(tmp2.index[1])
    lst.append(tmp2.index[2])
    return lst

def answer_seven():
    tmp=census_df[census_df['SUMLEV']==50].loc[:,['POPESTIMATE2010','POPESTIMATE2011','POPESTIMATE2012','POPESTIMATE2013','POPESTIMATE2014','POPESTIMATE2015']]
    tmp2=tmp.T
    tmp2.loc['maximum']=tmp2.loc[:].max()
    tmp2.loc['minimum']=tmp2.loc[:].min()
    tmp=tmp2.T
    tmp0=census_df[census_df['SUMLEV']==50]
    tmp0['DIF']=tmp['maximum']-tmp['minimum']
    tmp1=tmp0.where(tmp0['DIF']==tmp0['DIF'].max())
    tmp1=tmp1.dropna()
    tmp3=tmp1['CTYNAME'].tolist()
    return tmp3[0]

def answer_eight():
    tmp0=census_df[census_df['SUMLEV']==50]
    tmp1=tmp0.where(tmp0[(tmp0['REGION']==1) | (tmp0['REGION']==2)])
    tmp1=tmp1.dropna()
    tmp2=tmp1.where(tmp1['POPESTIMATE2015']>tmp1['POPESTIMATE2014'])
    tmp2=tmp2.dropna()
    tmp3=tmp2.where(tmp2['CTYNAME']=='Washington County')
    tmp3=tmp3.dropna()
    tmp4=tmp3[['STNAME','CTYNAME']]
    return tmp4