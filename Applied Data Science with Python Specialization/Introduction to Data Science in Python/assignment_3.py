# -*- coding: utf-8 -*-
"""assignment 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1giz1CLP4N6ESPCX3z6MUh-frH7nMdkmR
"""

def answer_one():
    import pandas as pd
    import numpy as np
    
    energy=pd.read_excel('Energy Indicators.xls',header=None)
    energy=energy.drop([0,1],axis=1)
    energy=energy.drop([i for i in range(18)],axis=0)
    energy=energy.drop([i for i in range(245,283)],axis=0)
    energy.columns=['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']
    energy['Energy Supply']=energy['Energy Supply']*1000000
    #energy['Energy Supply']=energy['Energy Supply'].astype(float)
    energy=energy.replace({'...': np.nan})
    energy=energy.reset_index()
    energy=energy.drop(['index'],axis=1)
    energy['Country'] = energy['Country'].str.replace('\d+', '')
    energy['Country']=energy['Country'].str.replace(r' \(.*\)','')
    energy=energy.set_index('Country')
    energy=energy.rename(index={"Republic of Korea": "South Korea", "United States of America": "United States", "United Kingdom of Great Britain and Northern Ireland": "United Kingdom","China, Hong Kong Special Administrative Region": "Hong Kong"})
    
    GDP=pd.read_csv('world_bank.csv',skiprows=4)
    GDP=GDP.replace(to_replace ='Korea, Rep.', value ='South Korea')
    GDP=GDP.replace(to_replace ='Iran, Islamic Rep.', value ='Iran')
    GDP=GDP.replace(to_replace ='Hong Kong SAR, China', value ='Hong Kong')
    GDP=GDP.loc[:,['Country Name','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]
    GDP=GDP.rename(columns={'Country Name': 'Country'})
    GDP=GDP.set_index('Country')
    
    ScimEn=pd.read_excel('scimagojr-3.xlsx',Header=None)
    ScimEn=ScimEn.set_index('Country')
    ScimEn=ScimEn[:15]
    
    tmp=pd.merge(ScimEn,energy,how='inner',left_index=True,right_index=True)
    tmp=pd.merge(tmp,GDP,how='inner',left_index=True,right_index=True)
    
    return tmp

def answer_two():
    import pandas as pd
    import numpy as np
    energy=pd.read_excel('Energy Indicators.xls',header=None)
    energy=energy.drop([0,1],axis=1)
    energy=energy.drop([i for i in range(18)],axis=0)
    energy=energy.drop([i for i in range(245,283)],axis=0)
    energy.columns=['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']
    energy['Energy Supply']=energy['Energy Supply']*1000000
    #energy['Energy Supply']=energy['Energy Supply'].astype(float)
    energy=energy.replace({'...': np.nan})
    energy=energy.reset_index()
    energy=energy.drop(['index'],axis=1)
    energy['Country'] = energy['Country'].str.replace('\d+', '')
    energy['Country']=energy['Country'].str.replace(r' \(.*\)','')
    energy=energy.set_index('Country')
    energy=energy.rename(index={"Republic of Korea": "South Korea", "United States of America": "United States", "United Kingdom of Great Britain and Northern Ireland": "United Kingdom","China, Hong Kong Special Administrative Region": "Hong Kong"})
    
    GDP=pd.read_csv('world_bank.csv',skiprows=4)
    GDP=GDP.loc[:,['Country Name','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]
    GDP=GDP.rename(columns={'Country Name': 'Country'})
    GDP=GDP.set_index('Country')
    
    ScimEn=pd.read_excel('scimagojr-3.xlsx',Header=None)
    ScimEn=ScimEn.set_index('Country')
    
    tmp0=pd.merge(ScimEn,energy,how='inner',left_index=True,right_index=True)
    tmp0=pd.merge(tmp0,GDP,how='inner',left_index=True,right_index=True)
    return len(tmp0)-3

def answer_three():
    import pandas as pd
    Top15=answer_one()
    tmp=Top15.loc[:,['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]
    tmp2=tmp.T
    tmp2['avgGDP']=0
    tmp3=tmp2.groupby(['avgGDP']).mean()
    tmp4=tmp3.T
    tmp5=tmp4.sort(ascending=False)
    tmp6=tmp5.squeeze()
    tmp6.rename('avgGDP')
    return tmp6

def answer_four():
    import pandas as pd
    Top15=answer_one()
    tmp=Top15.loc[:,['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015']]
    tmp2=tmp.T
    tmp2['avgGDP']=0
    tmp3=tmp2.groupby(['avgGDP']).mean()
    tmp4=tmp3.T
    tmp4.rename(columns={0:'col1'},inplace=True)
    tmp5=tmp4.sort_values(by=['col1'],ascending=False)
    tmp5
    #United Kingdom
    return tmp.loc['United Kingdom']['2015']-tmp.loc['United Kingdom']['2006']

def answer_five():
    Top15 = answer_one()
    return Top15['Energy Supply per Capita'].mean()

def answer_six():
    Top15 = answer_one()
    mx=Top15['% Renewable'].max()
    tmp=Top15.reset_index()
    tmp0=''
    for i in range(len(tmp)):
        if(tmp.iloc[i]['% Renewable']==mx):
            tmp0=tmp.iloc[i]['Country']
            break
    tmp1=(tmp0,mx)
    return tmp1

def answer_seven():
    Top15 = answer_one()
    Top15['Ratio']=Top15['Self-citations']/Top15['Citations']
    mx=Top15['Ratio'].max()
    tmp=Top15.reset_index()
    tmp0=''
    for i in range(len(tmp)):
        if(tmp.iloc[i]['Ratio']==mx):
            tmp0=tmp.iloc[i]['Country']
            break
    tmp1=(tmp0,mx)
    return tmp1

def answer_eight():
    Top15=answer_one()
    Top15['Population']=Top15['Energy Supply']/Top15['Energy Supply per Capita']
    tmp=Top15.sort_values(by=['Population'],ascending=False)
    tmp1=tmp.reset_index()
    tmp2=tmp1.iloc[2]['Country']
    return tmp2

def answer_nine():
    tmp=answer_one()
    tmp['Citable documents per person']=tmp['Citable documents']/(tmp['Energy Supply']/tmp['Energy Supply per Capita'])
    s1=tmp['Citable documents per person'].astype(float)
    s2=tmp['Energy Supply per Capita'].astype(float)
    tmp1=s1.corr(s2)
    return tmp1

def answer_ten():
    tmp0 = answer_one()
    tmp0['Med']=[1 if i>=tmp0['% Renewable'].median() else 0 for i in tmp0['% Renewable']]

    tmp1=tmp0['Med']
    tmp1.rename('HighRenew')
    return tmp1

def answer_eleven():
    import numpy as np
    ContinentDict  = {'China':'Asia', 
                      'United States':'North America', 
                      'Japan':'Asia', 
                      'United Kingdom':'Europe', 
                      'Russian Federation':'Europe', 
                      'Canada':'North America', 
                      'Germany':'Europe', 
                      'India':'Asia',
                      'France':'Europe', 
                      'South Korea':'Asia', 
                      'Italy':'Europe', 
                      'Spain':'Europe', 
                      'Iran':'Asia',
                      'Australia':'Australia', 
                      'Brazil':'South America'}
    tmp=answer_one()
    tmp=tmp.reset_index()
    tmp['Continent']=[ContinentDict[country] for country in tmp['Country']]
    tmp['Population']=tmp['Energy Supply']/tmp['Energy Supply per Capita']
    tmp['Population']=tmp['Population'].astype(float)
    tmp=tmp.set_index('Continent')
    tmp1=tmp.groupby(level=0)['Population'].agg({'size': np.size, 'sum': np.sum, 'mean':np.mean, 'std':np.std})
    return tmp1

def answer_twelve():
    import numpy as np
    import pandas as pd
    ContinentDict  = {'China':'Asia', 
                      'United States':'North America', 
                      'Japan':'Asia', 
                      'United Kingdom':'Europe', 
                      'Russian Federation':'Europe', 
                      'Canada':'North America', 
                      'Germany':'Europe', 
                      'India':'Asia',
                      'France':'Europe', 
                      'South Korea':'Asia', 
                      'Italy':'Europe', 
                      'Spain':'Europe', 
                      'Iran':'Asia',
                      'Australia':'Australia', 
                      'Brazil':'South America'}
    tmp=answer_one()
    tmp=tmp.reset_index()
    tmp['Continent']=[ContinentDict[country] for country in tmp['Country']]
    tmp['bin']=pd.cut(tmp['% Renewable'],5)
    tmp1=tmp.groupby(['Continent','bin']).size()
    return tmp1

def answer_thirteen():
    import pandas as pd
    tmp=answer_one()
    tmp['Population']=tmp['Energy Supply']/tmp['Energy Supply per Capita']
    tmp['Population']=tmp['Population'].astype(str)
    tmp=tmp.reset_index()

    tmp1=''
    lst=[]
    for i in range(len(tmp)):
        tmp1=tmp.iloc[i]['Population']
        tmp1=tmp1[::-1]
        f=False
        ct=0
        tmp2=''
        for j in tmp1:
            if(j=='.'):
                f=True
                tmp2+=(j)
                continue
            if(f==False):
                tmp2+=(j)
            elif(f==True and ct!=3):
                tmp2+=(j)
                ct+=1
            elif(f==True and ct==3):
                tmp2+=(',')
                tmp2+=(j)
                ct=1
        tmp2=tmp2[::-1]
        lst.append(tmp2)

    tmp3=pd.Series(lst)
    tmp['Population']=tmp3
    tmp=tmp.set_index('Country')
    tmp4=tmp['Population']
    tmp4=tmp4.rename('PopEst')
    return tmp4