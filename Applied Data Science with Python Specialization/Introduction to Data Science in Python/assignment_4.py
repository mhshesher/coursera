# -*- coding: utf-8 -*-
"""assignment 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1giz1CLP4N6ESPCX3z6MUh-frH7nMdkmR
"""

import pandas as pd
import numpy as np
from scipy.stats import ttest_ind

# Use this dictionary to map state names to two letter acronyms
states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}

def get_list_of_university_towns():
    '''Returns a DataFrame of towns and the states they are in from the 
    university_towns.txt list. The format of the DataFrame should be:
    DataFrame( [ ["Michigan", "Ann Arbor"], ["Michigan", "Yipsilanti"] ], 
    columns=["State", "RegionName"]  )
    
    The following cleaning needs to be done:

    1. For "State", removing characters from "[" to the end.
    2. For "RegionName", when applicable, removing every character from " (" to the end.
    3. Depending on how you read the data, you may need to remove newline character '\n'. '''
    
    import pandas as pd
    f=open("university_towns.txt","r")

    a=''
    st=''
    rg=''
    lst0=[]
    df1=pd.DataFrame()
    for i in f:
    #     print(i)
        rg=''
        lst=[]
        f=True
        if(i[-7:-1]=='[edit]'):
            st=i[:-7]
        elif '(' in i:
            for j in i:
                if j=='(':
                    f=False
                    break
                
                else:
                    rg+=j
        else:
            rg=i
            f=False
        if f==False:
            rg=rg[:-1]
#             print(st)
            lst.append(st)
            lst.append(rg)
            lst0.append(lst)

    df1=pd.DataFrame(lst0,columns=["State", "RegionName"])

    return df1
# get_list_of_university_towns()
# lst0=tmp['RegionName'].tolist()
# print(lst0)

def get_recession_start():
    '''Returns the year and quarter of the recession start time as a 
    string value in a format such as 2005q3'''
    
    df0=pd.read_excel('gdplev.xls',skiprows=219)
    df0=df0.rename(columns={'1999q4':'Time',9926.1:'GDP'})
    df0=df0[['Time','GDP']]
    tmp=''
    for i in range(len(df0)):
        if df0.iloc[i-1]['GDP']<df0.iloc[i-2]['GDP'] and df0.iloc[i]['GDP']<df0.iloc[i-1]['GDP']:
            tmp=df0.iloc[i-2]['Time']
            break
    return tmp

def get_recession_end():
    '''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
       
    df0=pd.read_excel('gdplev.xls',skiprows=219)
    df0=df0.rename(columns={'1999q4':'Time',9926.1:'GDP'})
    df0=df0[['Time','GDP']]
    tmp=''
    for i in range(38,len(df0)):
        if df0.iloc[i-1]['GDP']>df0.iloc[i-2]['GDP'] and df0.iloc[i]['GDP']>df0.iloc[i-1]['GDP']:
            tmp=df0.iloc[i]['Time']
            break
    return tmp

def get_recession_bottom():
    '''Returns the year and quarter of the recession bottom time as a 
    string value in a format such as 2005q3'''
    
    df0=pd.read_excel('gdplev.xls',skiprows=219)
    df0=df0.rename(columns={'1999q4':'Time',9926.1:'GDP'})
    df0=df0[['Time','GDP']]
    lst=[i for i in range(len(df0))]
    df0['Tmp']=lst
    tmp='s'
    for i in range(len(df0)):
        if df0.iloc[i-1]['GDP']<df0.iloc[i-2]['GDP'] and df0.iloc[i]['GDP']<df0.iloc[i-1]['GDP']:
            df0=df0.replace({i-2:tmp})

    tmp='e'
    for i in range(len(df0)):
        if df0.iloc[i-1]['GDP']>df0.iloc[i-2]['GDP'] and df0.iloc[i]['GDP']>df0.iloc[i-1]['GDP']:
            df0=df0.replace({i:tmp})


    mn=df0['GDP'].max()
    f=True
    # print(mn)
    ans=''
    for i in range(len(df0)):
        if df0.iloc[i]['Tmp']=='s':
            for j in range(i,len(df0)):
                if df0.iloc[j]['GDP']<mn:
                    mn=df0.iloc[j]['GDP']
                    ans=df0.iloc[j]['Time']
                elif df0.iloc[j]['Tmp']=='e':
                    break
    
    return ans

def convert_housing_data_to_quarters():
    '''Converts the housing data to quarters and returns it as mean 
    values in a dataframe. This dataframe should be a dataframe with
    columns for 2000q1 through 2016q3, and should have a multi-index
    in the shape of ["State","RegionName"].
    
    Note: Quarters are defined in the assignment description, they are
    not arbitrary three month periods.
    
    The resulting dataframe should have 67 columns, and 10,730 rows.
    '''
    
    import pandas as pd
    df2=pd.read_csv('City_Zhvi_AllHomes.csv')
    df2.head()
    df3=df2[['State','RegionName']]

    for i in range(2000,2017):
        df3[str(i)+'q1']=df2[[str(i)+'-01',str(i)+'-02',str(i)+'-03']].mean(axis=1)
        df3[str(i)+'q2']=df2[[str(i)+'-04',str(i)+'-05',str(i)+'-06']].mean(axis=1)
        if i<2016:
            df3[str(i)+'q3']=df2[[str(i)+'-07',str(i)+'-08',str(i)+'-09']].mean(axis=1)
        else:
            df3[str(i)+'q3']=df2[[str(i)+'-07',str(i)+'-08']].mean(axis=1)
        if i<2016:
            df3[str(i)+'q4']=df2[[str(i)+'-10',str(i)+'-11',str(i)+'-12']].mean(axis=1)

    df3=df3.replace({'State':states})
    df3=df3.set_index(["State","RegionName"])
    return df3

def run_ttest():
    '''First creates new data showing the decline or growth of housing prices
    between the recession start and the recession bottom. Then runs a ttest
    comparing the university town values to the non-university towns values, 
    return whether the alternative hypothesis (that the two groups are the same)
    is true or not as well as the p-value of the confidence. 
    
    Return the tuple (different, p, better) where different=True if the t-test is
    True at a p<0.01 (we reject the null hypothesis), or different=False if 
    otherwise (we cannot reject the null hypothesis). The variable p should
    be equal to the exact p value returned from scipy.stats.ttest_ind(). The
    value for better should be either "university town" or "non-university town"
    depending on which has a lower mean price ratio (which is equivilent to a
    reduced market loss).'''
    
    st=get_recession_start()
    bt=get_recession_bottom()
    df=convert_housing_data_to_quarters()
    sy=''
    for i in range(len(df.columns)):
        if df.columns[i]==st:
            sy=df.columns[i-1]
            break

    df['Change']=df[bt]-df[sy]
    df=df.reset_index()

    df0=get_list_of_university_towns()
    df1=pd.merge(df,df0,how='inner',left_on=["State", "RegionName"],right_on=["State", "RegionName"])
    df1['Flag']='uni'
    df2=pd.merge(df,df1,how='outer',left_on=['State', 'RegionName','Change'],right_on=['State', 'RegionName','Change'])
    df2['Flag']=df2['Flag'].replace({np.NaN:'nonuni'})
    df3=df2[df2['Flag']=='nonuni']
    #df1 is uni dataset, df3 is non uni dataset
    df1=df1[['State', 'RegionName','Change']]
    df3=df3[['State', 'RegionName','Change']]
    df1=df1.dropna()
    df3=df3.dropna()
    sts,p=ttest_ind(df1['Change'],df2['Change'],nan_policy='omit')


    if p<0.01:
        diff=True
    else:
        dff=False

    if df1['Change'].mean()<df3['Change'].mean():
        btr='non-university town'
    else:
        btr='university town'

    rv=(diff,p,btr)
    return rv